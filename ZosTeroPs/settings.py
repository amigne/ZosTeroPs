"""
Django settings for ZosTeroPs project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import environ
import os

from django.utils.translation import gettext_lazy as _
from pathlib import Path

# Instantiate .env processor and set default values
env = environ.Env(
    DEV=(bool, False),
    DEBUG=(bool, False),
)
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# DEV indicates that the setup is used in an development environment
DEV = env('DEV')

# DEBUG mode should be used for development only
DEBUG = env('DEBUG')

SECRET_KEY = env('SECRET_KEY')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])

# ZTP application
ZTP_BASE_URL = 'http://127.0.0.1:8000'
ZTP_BOOTSTRAP_URL = 'bootstrap/'

ZTP_CONFIG_URL = 'config/'

ZTP_FIRMWARES_PATH = 'firmwares/'
ZTP_FIRMWARES_URL = 'firmwares/'

# Internationalization
USE_I18N = True
USE_L10N = True
USE_TZ = True
TIME_ZONE = env('TIME_ZONE', default='UTC')
LANGUAGE_CODE = env('LANGUAGE_CODE', default='en')
LANGUAGES = (
    ('en', _('English')),
    ('fr', _('French')),
)

# Authentications and logons
LOGIN_URL = 'user:login'
LOGOUT_URL = 'user:logout'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

AUTH_USER_MODEL = 'user.User'
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },
]

LDAP_AUTHENTICATION = env.bool('LDAP_AUTHENTICATION', False)
if LDAP_AUTHENTICATION:
    import ldap
    from django_auth_ldap.config import LDAPSearch, GroupOfNamesType, PosixGroupType

    AUTHENTICATION_BACKENDS = env.tuple('AUTHENTICATION_BACKENDS',
                                        default=('django_auth_ldap.backend.LDAPBackend',))
    AUTH_LDAP_SERVER_URI = env('AUTH_LDAP_SERVER_URI', default='ldap://localhost')
    AUTH_LDAP_BIND_DN = env('AUTH_LDAP_BIND_DN', default='')
    AUTH_LDAP_BIND_PASSWORD = env('AUTH_LDAP_BIND_PASSWORD', default='')

    AUTH_LDAP_USER_DN_TEMPLATE = env('AUTH_LDAP_USER_DN_TEMPLATE', default=None)

    AUTH_LDAP_USER_ATTR_MAP = env.dict('AUTH_LDAP_USER_ATTR_MAP', default={})

    AUTH_LDAP_REQUIRE_GROUP = env('AUTH_LDAP_REQUIRE_GROUP', default=None)
    AUTH_LDAP_DENY_GROUP = env('AUTH_LDAP_DENY_GROUP', default=None)

    AUTH_LDAP_USER_FLAGS_BY_GROUP = {}
    AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_ACTIVE = env('AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_ACTIVE',
                                                  default=None)
    AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_STAFF = env('AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_STAFF',
                                                 default=None)
    AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_SUPERUSER = env('AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_SUPERUSER',
                                                     default=None)
    if AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_ACTIVE:
        AUTH_LDAP_USER_FLAGS_BY_GROUP['is_active'] = AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_ACTIVE
    if AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_STAFF:
        AUTH_LDAP_USER_FLAGS_BY_GROUP['is_staff'] = AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_STAFF
    if AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_SUPERUSER:
        AUTH_LDAP_USER_FLAGS_BY_GROUP['is_superuser'] = AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_SUPERUSER

    auth_ldap_group_type = env('AUTH_LDAP_GROUP_TYPE', default=None)
    auth_ldap_group_type_name_attr = env('AUTH_LDAP_GROUP_TYPE_NAME_ATTR', default=None)
    auth_ldap_group_type_params = {}
    if auth_ldap_group_type_name_attr:
        auth_ldap_group_type_params['name_attr'] = auth_ldap_group_type_name_attr

    if auth_ldap_group_type == 'GroupOfNamesType':
        AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(**auth_ldap_group_type_params)
    elif auth_ldap_group_type == 'PosixGroupType':
        AUTH_LDAP_GROUP_TYPE = PosixGroupType(**auth_ldap_group_type_params)

    AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
        env('AUTH_LDAP_GROUP_SEARCH_BASE_DN', default='ou=Groups,dc=example,dc=com'),
        ldap.SCOPE_SUBTREE,
        env('AUTH_LDAP_GROUP_SEARCH_FILTER_STR', default='(objectClass=groupOfNames)'),
    )

    AUTH_LDAP_MIRROR_GROUPS = env.bool('AUTH_LDAP_MIRROR_GROUPS', None)

    AUTH_LDAP_ALWAYS_UPDATE_USER = env.bool('AUTH_LDAP_ALWAYS_UPDATE_USER', default=True)

    AUTH_LDAP_FIND_GROUP_PERMS = env.bool('AUTH_LDAP_FIND_GROUP_PERMS', default=True)

    AUTH_LDAP_CACHE_GROUPS = env.bool('AUTH_LDAP_CACHE_GROUPS', default=False)
    AUTH_LDAP_GROUP_CACHE_TIMEOUT = env.int('AUTH_LDAP_GROUP_CACHE_TIMEOUT', default=0)

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

# Databases
DATABASES = {
    'default': env.db(),
}

# URL and routes
ROOT_URLCONF = 'ZosTeroPs.urls'

# WSGI
WSGI_APPLICATION = 'ZosTeroPs.wsgi.application'

# Django applications
INSTALLED_APPS = [
    'ztp',
    'logs',
    'user',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.humanize',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
if DEV:
    INSTALLED_APPS += [
        'rosetta',
    ]

# Middlewares
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'logs.middleware.ModelChangeLoggingMiddleware',
]

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# E-mails
DEFAULT_FROM_EMAIL= env('DEFAULT_FROM_EMAIL', default='webmaster@localhost')
EMAIL_CONFIG = env.email_url('EMAIL_URL', default='consolemail://')
vars().update(EMAIL_CONFIG)

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': [],
        },
        'ztp': {
            'handlers': [],
        },
    },
}

LOG_DJANGO_LEVEL=env('LOG_DJANGO_LEVEL', default='WARNING')
if LOG_DJANGO_LEVEL:
    LOGGING['loggers']['django']['level'] = LOG_DJANGO_LEVEL

LOG_DJANGO_CONSOLE=env.bool('LOG_DJANGO_CONSOLE', default=False)
if LOG_DJANGO_CONSOLE:
    LOGGING['loggers']['django']['handlers'] += ['console']

LOG_ZTP_LEVEL=env('LOG_ZTP_LEVEL', default='WARNING')
if LOG_ZTP_LEVEL:
    LOGGING['loggers']['ztp']['level'] = LOG_ZTP_LEVEL

LOG_ZTP_CONSOLE=env.bool('LOG_ZTP_CONSOLE', default=False)
if LOG_ZTP_CONSOLE:
    LOGGING['loggers']['ztp']['handlers'] += ['console']

LOG_FILE=env('LOG_FILE', default=None)
LOG_DJANGO_FILE = env.bool('LOG_DJANGO_FILE', default=False)
LOG_ZTP_FILE = env.bool('LOG_ZTP_FILE', default=False)
if LOG_FILE:
    LOGGING['handlers']['file'] = {
        'class': 'logging.FileHandler',
        'filename': LOG_FILE,
    }
    if LOG_DJANGO_FILE:
        LOGGING['loggers']['django']['handlers'] += ['file']
    if LOG_ZTP_FILE:
        LOGGING['loggers']['ztp']['handlers'] += ['file']
